version: 2.1

commands:
  install_nodejs:
    description: install node.js lts
    steps:
      - run:
          name: install node.js lts
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            sudo npm install -g n
            sudo n 13.8.0

  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y


  install_awscli:
    description: install aws cli
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws configure set aws_access_key_id $AWS_ACCESS_KEY --profile udapeople-admin
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile udapeople-admin
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >> --profile udapeople-admin
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive --profile udapeople-admin
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>> --profile udapeople-admin
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.Workflow_ID>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depns]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-depns

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depns]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depns]
      - run:
          name: front-end unit test
          command: |
            cd frontend
            npm install
            npm test
      
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depns]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm test
      
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-depns]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level-critical
            #npm audit fix --force
            npm audit --audit-level-critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-depns]
      - run:
          name: Back-end unit test
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level-critical
             npm audit fix --force --audit-level-critical
             #npm audit fix --force
             npm audit --audit-level-critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags "project= udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --profile udapeople-admin
              
      - run:
          name: ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags "project= udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   \
              --profile udapeople-admin 
              
      - run:
          name: add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --profile udapeople-admin \
                --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
            fingerprints: ["4a:2b:31:94:c1:7a:aa:80:ea:0e:82:4c:59:c0:0b:4d"]
      - attach_workspace:
            at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dumb.txt
      - run:
          name: send migration results to memstash / kvdb.io
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dumb.txt
            then
                curl  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d "1"
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-depns]
      - run:
          name: Install dependencies 
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --profile udapeople-admin \
                --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive --profile udapeople-admin
      - destroy-environment
      - revert-migrations     
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
            fingerprints: ["4a:2b:31:94:c1:7a:aa:80:ea:0e:82:4c:59:c0:0b:4d"]
      - attach_workspace:
            at: ~/
      - restore_cache:
          keys: [backend-depns]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations   

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --profile udapeople-admin \
                --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
            export API_URL=http://${BACKEND_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      - destroy-environment
      - revert-migrations    

  cloudfront-update:
    docker:
      - image: cimg/base:stable
      
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: save workflow id to kvdb
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text --profile udapeople-admin )
            echo OldWorkflowID: "${OldWorkflowID}"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --profile udapeople-admin
        
      - destroy-environment
      - revert-migrations      

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
            --profile udapeople-admin \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID : $OldWorkflowID
            

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive --profile udapeople-admin
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" --profile udapeople-admin
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" --profile udapeople-admin
            fi
     
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]